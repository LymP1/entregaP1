/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=3; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.ArrayList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	private HashMap <String, Integer > variables =new HashMap <String, Integer >();
	 int NORTH = 0;
	 int SOUTH = 1;
	 int EAST = 2;
	 int WEST = 3;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}
TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < GT : ">" >
| < EQUALS : "==" >
}

TOKEN: /* Nombres de Comandos */
{

			<MOV:  "Mov">
		
		| 	<PUT: "Put">
		| 	<PICK: "Pick">
		|  < POP: "Pop" >
		|  <GO: "GO" >
        |  < HOP:  "HOP" >
        

}
TOKEN:
{
  < ASSIGNTO:"assignTo">

}

TOKEN:
{
		<BALLOONS:  "BALLOONS" >
		|	<CHIPS:     "CHIPS"  >	

}






TOKEN : // PROCEDURES 
{
  < ROBOT_R : "ROBOT_R" >
| < VARS: "VARS" >
| < PROCS: "PROCS" >
}

TOKEN : // OPERATORS:
{
 
 // < D: "left" | "right" | "around" >  //girar  |
   < LAT: "north" | "south" | "east" | "west" >
| < DIR: "front" | "right" | "left" | "back" | "around"> //DIRECCION
| < IF: "if" >
| < THEN: "then" >
| < ELSE: "else" >
| < WHILE: "while" >
| < DO: "do" >
| < REPEAT: "repeat" >
}

TOKEN : // INTRUCTIONS:
{
  < GOTO: "goto" >
| < MOVE: "move" >
| < TURN: "turn" >
| < FACE: "face" >
| < MOVETOTHE: "moveToThe" >
| < MOVEINDIR: "moveInDir" >
| < JUMPTOTHE: "jumpToThe" >
| < JUMPINDIR: "jumpindir" >
| < NOP: "nop" >
}

TOKEN: // CONDITION:
{
  < FACING:"facing">
| < CANPUT: "canPut" >
| < CANPICK: "canPick" >
| < CANMOVEINDIR: "canMoveInDir" >
| < CANJUMPINDIR: "canJumpInDir" >
| < CANMOVETOTHE: "canMoveToThe" >
| < CANJUMPTOTHE: "canJumpToThe" >
| < NOT: "not" >
}

TOKEN :
{
 
 < ID : < LETTER > (< LETTER > | < DIGIT >)* >
| <NUM: (<DIGIT>)+ >
| < #DIGIT : [ "0"-"9" ] >
| < #LETTER : [ "a"-"z" ] >
}


	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		
		int x,y;
		salida=new String();	
	}
	

	
	{
	  estructura() { return true; }
  	| <EOF> {return false;}	
	}

//Estructura
	void estructura():
	{
	}
	{
	  < ROBOT_R >
	  (	    crearVars()
	  )?
	  < PROCS >
	  (
	 commandseq() 
)
	"[" commandseq() "]"
	  
	}
//PROCS


//CONDITIONAL



//REPEAT
/**
	void Repeat():

 {
      int num;
      ArrayList < >  procs= new ArrayList < >
    }
    {
      < REPEAT > ":" num=varOrNum() "[" block() "]"
    }
*/

//Vars
	void crearVars():
	{
	  Token varT;
	  String var;
	}
	{
	  < VARS >
	  (
	    varT=< ID > ","{
	      var =varT.image;
	      variables.put(var, null); }
	  )*
	  (
	    varT=< ID > ";"{
	      var =varT.image;
	      variables.put(var, null); }
	  )
	}

//COMANDOS



	
	void command1():
	{
	}
	{
	  comandAssingTo()
	| comandNop()
	| comandPick()
	| comandGoto()
	| comandTurn()
	| comandMove()
	| comandPut()
	| comandmoveToThe()
	| comandmoveInDir()
	| comandJumpInDir()
	| comandJumpToThe()
	| commandFace()
	}

void commandseq():
{
}
{
  (        command1()
  ) (";" command1())*
}
	



void comandJumpInDir():
    {
      int valor;
      Token lat;
    }
    {
      (
        < JUMPINDIR > ":" valor=varOrNum() "," lat=< LAT >
        {
          String x = lat.image.toLowerCase();
          int orientacion = world.getFacing();
          if (x.equals("north")) {
	        if (orientacion == NORTH) {
	          world.moveForward(valor, true);
	        }
            if (orientacion == SOUTH) {
              world.turnRight();
              world.turnRight();
              world.moveForward(valor, true);
            }
            else if (orientacion == EAST) {
              world.turnRight();
              world.turnRight();
              world.turnRight();
              world.moveForward(valor, true);
            }
            else if (orientacion == WEST) {
              world.turnRight();
              world.moveForward(valor, true);
            }
          }
          else if (x.equals("south")) {
            if (orientacion == NORTH) {
              world.turnRight();
              world.turnRight();
              world.moveForward(valor, true);
            }
	        else if (orientacion == SOUTH) {
              world.moveForward(valor, true);
            }
            else if (orientacion == EAST) {
              world.turnRight();
              world.moveForward(valor, true);
            }
            else if (orientacion == WEST) {
              world.turnRight();
              world.turnRight();
              world.turnRight();
              world.moveForward(valor, true);
            }
          }
          else if (x.equals("east")) {
            if (orientacion == NORTH) {
              world.turnRight();
              world.moveForward(valor, true);
            }
            else if (orientacion == SOUTH) {
              world.turnRight();
              world.turnRight();
              world.turnRight();
              world.moveForward(valor, true);
            }
	        else if (orientacion == EAST) {
              world.moveForward(valor, true);
            }
            else if (orientacion == WEST) {
              world.turnRight();
              world.turnRight();
              world.moveForward(valor, true);
            }
          }
          else if (x.equals("west")) {
            if (orientacion == NORTH) {
              world.turnRight();
              world.turnRight();
              world.turnRight();
              world.moveForward(valor, true);
            }
            else if (orientacion == SOUTH) {
              world.turnRight();
              world.moveForward(valor, true);
            }
            else if (orientacion == EAST) {
              world.turnRight();
              world.turnRight();
              world.moveForward(valor, true);
            }
	        else if (orientacion == WEST) {
              world.moveForward(valor, true);
            }
          }
        }
      )
    }

     
  void comandJumpToThe():
	{
	  
	  Token objT;
	  int valor;
	  
	}
	{
	  (
		< JUMPTOTHE > ":" valor=varOrNum() ","  objT=< DIR >
		{
		  String x = objT.image.toLowerCase();
		  int orientacion = world.getFacing();
		  if (x.equals("front")) {
		  	if (orientacion == 0) {
			world.moveVertically(-valor, true);
		  	}
		  	else if (orientacion == 1) {
			world.moveVertically(valor, true);
		  	}
		  	else if (orientacion == 2) {
			world.moveHorizontally(valor, true);
		  	}
		  	else if (orientacion == 3) {
			world.moveHorizontally(-valor, true);
		  	}
		  }
		  else if (x.equals("back")) {
			if (orientacion == 0) {
			world.moveVertically(valor, true);
		  	}
		  	else if (orientacion == 1) {
			world.moveVertically(-valor, true);
		  	}
		  	else if (orientacion == 2) {
			world.moveHorizontally(-valor, true);
		  	}
		  	else if (orientacion == 3) {
			world.moveHorizontally(valor, true);
		  	}
		  }
		  else if (x.equals("right")) {
			if (orientacion == 1) {
			world.moveHorizontally(valor, true);
		  	}
		  	else if (orientacion == 1) {
			world.moveHorizontally(-valor, true);
		  	}
		  	else if (orientacion == 2) {
			world.moveVertically(valor, true);
		  	}
		  	else if (orientacion == 3) {
			world.moveVertically(-valor, true);
		  	}
		  }
		  else if (x.equals("left")) {
			if (orientacion == 0) {
			world.moveHorizontally(-valor, true);
		  	}
		  	else if (orientacion == 1) {
			world.moveHorizontally(valor, true);
		  	}
		  	else if (orientacion == 2) {
			world.moveVertically(-valor, true);
		  	}
		  	else if (orientacion == 3) {
			world.moveVertically(valor, true);
		  	}
		  }
		}
	  )
	}




	void comandAssingTo():
	{
	Token variableT;
	Token valorT;

	  String variable;
	  int valor;
	}
	{
	  < ASSIGNTO> ":" valorT=< NUM >{ try 
				{
					valor = Integer.parseInt(valorT.image);
				} 
				catch (NumberFormatException ee) 
				{
					throw new Error("Number out of bounds: "+token.image+" !!");
				}
				 }

	   "," variableT=< ID> {
	      variable =variableT.image;
	      if(variables.containsKey(variable)) {
	        variables.put(variable, valor);
	      }else {
	        throw new Error("La variable no existe");
	      }
	      	       
	     }
	  
	}

	void comandNop():
 {
 }
 {
   < NOP> ":"
 }
	



	
	void comandPick():
	{
	  
	  Token objT;
	  String obj;
	  int valor;
	  
	}
	{
	  < PICK >":" valor=varOrNum() "," (objT=< BALLOONS> |objT=< CHIPS>)

	  {
	  obj= objT.image.toLowerCase();
	  if (obj.equals("chips")) {
	    world.pickChips(valor);
	  }
	  else if(obj.equals("balloons")) {
	    world.grabBalloons(valor);
	  }


	  }
	  }
	  






	
	void comandGoto ():
	{
	  int var;
	  int var2;
	}
	{
	  (
	  < GOTO > ":" var= varOrNum() "," var2=varOrNum()
	  {
		world.setPostion(var,var2);	    
	  }
	)
	}

	void comandTurn ():
	{
	  Token var;
	}
	{
	  (
	  < TURN > ":" var=< DIR > 
	  {
	    String x=var.image.toLowerCase();
	    if (x.equals("right")) {
	      world.turnRight();
	    }
	    else if(x.equals("left")) {
	      world.turnRight();
	      world.turnRight();
	      world.turnRight()	;      
	    }
	    else if(x.equals("around")) {
	      world.turnRight();
	      world.turnRight();
	    }
	  }
	)
	}

	void comandMove ():
	{
	  int var;
	}
	{
	  (
	  < MOVE > ":" var= varOrNum()
	  {
	    
		world.moveForward(var,false);	    
	  }
	)
	}

   void comandmoveToThe ():
	{
	  
	  Token objT;
	  int valor;
	  
	}
	{
	  (
		< MOVETOTHE > ":" valor=varOrNum() ","  objT=< DIR >
		{
		  String x = objT.image.toLowerCase();
		  int orientacion = world.getFacing();
		  if (x.equals("front")) {
		  	if (orientacion == 0) {
			world.moveVertically(-valor, false);
		  	}
		  	else if (orientacion == 1) {
			world.moveVertically(valor, false);
		  	}
		  	else if (orientacion == 2) {
			world.moveHorizontally(valor, false);
		  	}
		  	else if (orientacion == 3) {
			world.moveHorizontally(-valor, false);
		  	}
		  }
		  else if (x.equals("back")) {
			if (orientacion == 0) {
			world.moveVertically(valor, false);
		  	}
		  	else if (orientacion == 1) {
			world.moveVertically(-valor, false);
		  	}
		  	else if (orientacion == 2) {
			world.moveHorizontally(-valor, false);
		  	}
		  	else if (orientacion == 3) {
			world.moveHorizontally(valor, false);
		  	}
		  }
		  else if (x.equals("right")) {
			if (orientacion == 1) {
			world.moveHorizontally(valor, false);
		  	}
		  	else if (orientacion == 1) {
			world.moveHorizontally(-valor, false);
		  	}
		  	else if (orientacion == 2) {
			world.moveVertically(valor, false);
		  	}
		  	else if (orientacion == 3) {
			world.moveVertically(-valor, false);
		  	}
		  }
		  else if (x.equals("left")) {
			if (orientacion == 0) {
			world.moveHorizontally(-valor, false);
		  	}
		  	else if (orientacion == 1) {
			world.moveHorizontally(valor, false);
		  	}
		  	else if (orientacion == 2) {
			world.moveVertically(-valor, false);
		  	}
		  	else if (orientacion == 3) {
			world.moveVertically(valor, false);
		  	}
		  }
		}
	  )
	}


	void comandmoveInDir():
	{
      int valor;
      Token lat;
    }
    {
      (
        < MOVEINDIR > ":" valor=varOrNum() "," lat=< LAT >
        {
          String x = lat.image.toLowerCase();
          int orientacion = world.getFacing();
          if (x.equals("north")) {
	        if (orientacion == NORTH) {
	          world.moveForward(valor, false);
	        }
            if (orientacion == SOUTH) {
              world.turnRight();
              world.turnRight();
              world.moveForward(valor, false);
            }
            else if (orientacion == EAST) {
              world.turnRight();
              world.turnRight();
              world.turnRight();
              world.moveForward(valor, false);
            }
            else if (orientacion == WEST) {
              world.turnRight();
              world.moveForward(valor, false);
            }
          }
          else if (x.equals("south")) {
            if (orientacion == NORTH) {
              world.turnRight();
              world.turnRight();
              world.moveForward(valor, false);
            }
	        else if (orientacion == SOUTH) {
              world.moveForward(valor, false);
            }
            else if (orientacion == EAST) {
              world.turnRight();
              world.moveForward(valor, false);
            }
            else if (orientacion == WEST) {
              world.turnRight();
              world.turnRight();
              world.turnRight();
              world.moveForward(valor, false);
            }
          }
          else if (x.equals("east")) {
            if (orientacion == NORTH) {
              world.turnRight();
              world.moveForward(valor, false);
            }
            else if (orientacion == SOUTH) {
              world.turnRight();
              world.turnRight();
              world.turnRight();
              world.moveForward(valor, false);
            }
	        else if (orientacion == EAST) {
              world.moveForward(valor, false);
            }
            else if (orientacion == WEST) {
              world.turnRight();
              world.turnRight();
              world.moveForward(valor, false);
            }
          }
          else if (x.equals("west")) {
            if (orientacion == NORTH) {
              world.turnRight();
              world.turnRight();
              world.turnRight();
              world.moveForward(valor, false);
            }
            else if (orientacion == SOUTH) {
              world.turnRight();
              world.moveForward(valor, false);
            }
            else if (orientacion == EAST) {
              world.turnRight();
              world.turnRight();
              world.moveForward(valor, false);
            }
	        else if (orientacion == WEST) {
              world.moveForward(valor, false);
            }
          }
        }
      )
    }
	void commandFace():
	{
	  Token var;
	}
	{
	  (
	    < FACE > ":" var=< LAT >
	    {
	      String x = var.image;
	      int orientacion = world.getFacing();
	      if (x.equals("north")) {
	        if (orientacion == 1) {
	          world.turnRight();
	          world.turnRight();
	        }
	        else if (orientacion == 2) {
	          world.turnRight();
	          world.turnRight();
	          world.turnRight();
	        }
	        else if (orientacion == 3) {
	          world.turnRight();
	        }
	      }
	      else if (x.equals("south")) {
			if (orientacion == 0) {
			  world.turnRight();
			  world.turnRight();
			}
			else if (orientacion == 2) {
			  world.turnRight();
			}
			else if (orientacion == 3) {
			  world.turnRight();
			  world.turnRight();
			  world.turnRight();
			}
		  }
		  else if (x.equals("east")) {
		    if (orientacion == 0) {
			  world.turnRight();
		    }
		    else if (orientacion == 1) {
			  world.turnRight();
			  world.turnRight();
			  world.turnRight();
		    }
		    else if (orientacion == 3) {
			  world.turnRight();
			  world.turnRight();
		    }
	      }
		  else if (x.equals("west")) {
		    if (orientacion == 0) {
			  world.turnRight();
			  world.turnRight();
			  world.turnRight();
		    }
		    else if (orientacion == 0) {
			  world.turnRight();
		    }
		    else if (orientacion == 2) {
			  world.turnRight();
			  world.turnRight();
		    }
	      }
	    }
	  )
	}

	void comandPut() :
	{
		int f=1;	
	}
	{
	  < PUT>":" f=varOrNum()"," (( <CHIPS>  {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   {world.putBalloons(f); salida = "Command:  Put Balloons";})	 )
	}



	
	  
// CONDICIONALES
	boolean cond1():
	{
	  boolean rta=true;
	}
	{
	  rta= condFacing() { return rta; }
	| rta= condCanPick(){ return rta; }
	| rta= condCanPut(){  return rta; }
	| rta=condnot() {  return rta; }
	| rta=condCanMoveInDir() {  return rta; }
	| rta=condCanJumpInDir() {  return rta; }
	| rta=condCanMoveToThe() {  return rta; }
	| rta=condcanJumpToThe() {  return rta; }
	}

	boolean condnot():
	{
	  boolean cond=true;
	}
	{
	 < NOT> ":" cond=cond1()
	 {
	   cond= !cond;
	   return cond;
	 }
	}

boolean condCanMoveToThe():
{
    int var;
    String latitud=null;
    Token lat;
    String dire;
}
{
  <CANMOVETOTHE> ":" var=varOrNum() "," lat=<DIR>
  {
    dire= lat.image.toLowerCase();
     if(dire.equals("front")) {latitud="north"; }
    else if(dire.equals("back")) {latitud="south"; }
    else if(dire.equals("right")) {latitud="east"; }
    else if(dire.equals("left")) {latitud="west"; }
            
    boolean verificacion = true;
    if(latitud.equals("north")) {
      Point p = world.getPosition();
		int tam = world.getN();
		int newY,i;
		newY = p.y+(-var);
		int dir = 5;
		{  
		if(p.y - newY > 0) { 
			dir = NORTH;
		} else { 
			dir = SOUTH;
		} if (newY > tam) { 
			verificacion = false;
		} else if (newY < 1) { 
			verificacion=false;
		} else if (this.world.isBlocked(new Point(p.x, newY))) {
			verificacion = false;
		}  else if(world.blockedInRange(p.x, p.y, newY, dir)) { 
			verificacion = false;
      	}
     	}
   }
   else if(latitud.equals("south")) {
      Point p = world.getPosition();
		int tam = world.getN();
		int newY,i;
		newY = p.y+(var);
		int dir = 5;
		{
		  if(p.y - newY > 0) { 
			dir = NORTH;
		} else { 
			dir = SOUTH;
		} if (newY > tam) { 
			verificacion = false;
		} else if (newY < 1) { 
			verificacion=false;
		} else if (this.world.isBlocked(new Point(p.x, newY))) { 
				verificacion = false;
		} 
		 else if(world.blockedInRange(p.x, p.y, newY, dir)) {
			verificacion = false;
		}
		}
	}
	else if(latitud.equals("east")) {
      Point p =world.getPosition();
		int tam = world.getN();
		int newX;
		newX = p.x+var;
		int dir = 5;
		{
		 if(p.x - newX > 0) { 
			dir = WEST;
		} else { 
			dir = EAST;
		} if (newX > tam) {  
			verificacion = false;
   		} else if (newX < 1) {  
			verificacion = false;
    	} else if (this.world.isBlocked(new Point(newX,p.y))) { 
			verificacion = false;
    	}  else if(world.blockedInRange(p.x, p.y, newX, dir)) {
			verificacion = false;
		}
    	}
   }
   else if (latitud.equals("west")) { 
      Point p =world.getPosition();
		int tam = world.getN();
		int newX;
		newX = p.x+(-var);
		int dir = 5;
		{
		if(p.x - newX > 0) { 
			dir = WEST;
		} else { 
			dir = EAST;
		} if (newX > tam) {  
			verificacion = false;
    	} else if (newX < 1) {  
			verificacion = false;
    	} else if (this.world.isBlocked(new Point(newX,p.y))) { 
			verificacion = false;
    	} 
    	else if(world.blockedInRange(p.x, p.y, newX, dir)) { 
			verificacion = false;
		}
    	}

  }
  	if (verificacion) { 
    System.out.println("si sirve");
  }else {
      System.out.println("no_sirve");
    }
    return verificacion;
}
}

	
    boolean condCanMoveInDir():
{
    int var;
    String latitud;
    Token lat;
}
{
  <CANMOVEINDIR> ":" var=varOrNum() "," lat=<LAT>
  {
    latitud= lat.image.toLowerCase();
    boolean verificacion = true;
    if(latitud.equals("north")) {
      Point p = world.getPosition();
		int tam = world.getN();
		int newY,i;
		newY = p.y+(-var);
		int dir = 5;
		{  
		if(p.y - newY > 0) { 
			dir = NORTH;
		} else { 
			dir = SOUTH;
		} if (newY > tam) { 
			verificacion = false;
		} else if (newY < 1) { 
			verificacion=false;
		} else if (this.world.isBlocked(new Point(p.x, newY))) {
			verificacion = false;
		}  else if(world.blockedInRange(p.x, p.y, newY, dir)) { 
			verificacion = false;
      	}
     	}
   }
   else if(latitud.equals("south")) {
      Point p = world.getPosition();
		int tam = world.getN();
		int newY,i;
		newY = p.y+(var);
		int dir = 5;
		{
		  if(p.y - newY > 0) { 
			dir = NORTH;
		} else { 
			dir = SOUTH;
		} if (newY > tam) { 
			verificacion = false;
		} else if (newY < 1) { 
			verificacion=false;
		} else if (this.world.isBlocked(new Point(p.x, newY))) { 
				verificacion = false;
		} 
		 else if(world.blockedInRange(p.x, p.y, newY, dir)) {
			verificacion = false;
		}
		}
	}
	else if(latitud.equals("east")) {
      Point p =world.getPosition();
		int tam = world.getN();
		int newX;
		newX = p.x+var;
		int dir = 5;
		{
		 if(p.x - newX > 0) { 
			dir = WEST;
		} else { 
			dir = EAST;
		} if (newX > tam) {  
			verificacion = false;
   		} else if (newX < 1) {  
			verificacion = false;
    	} else if (this.world.isBlocked(new Point(newX,p.y))) { 
			verificacion = false;
    	}  else if(world.blockedInRange(p.x, p.y, newX, dir)) {
			verificacion = false;
		}
    	}
   }
   else if (latitud.equals("west")) { 
      Point p =world.getPosition();
		int tam = world.getN();
		int newX;
		newX = p.x+(-var);
		int dir = 5;
		{
		if(p.x - newX > 0) { 
			dir = WEST;
		} else { 
			dir = EAST;
		} if (newX > tam) {  
			verificacion = false;
    	} else if (newX < 1) {  
			verificacion = false;
    	} else if (this.world.isBlocked(new Point(newX,p.y))) { 
			verificacion = false;
    	} 
    	else if(world.blockedInRange(p.x, p.y, newX, dir)) { 
			verificacion = false;
		}
    	}

  }
  	if (verificacion) { 
    System.out.println("si sirve");
  }else {
      System.out.println("no_sirve");
    }
    return verificacion;
}
}
	boolean condCanJumpInDir():
{
    int var;
    String latitud;
    Token lat;
}
{
  <CANJUMPINDIR> ":" var=varOrNum() "," lat=<LAT>
  {
    latitud= lat.image.toLowerCase();
    boolean verificacion = true;
    if(latitud.equals("north")) {
      Point p = world.getPosition();
		int tam = world.getN();
		int newY,i;
		newY = p.y+(-var);
		int dir = 5;
		{  
		if(p.y - newY > 0) { 
			dir = NORTH;
		} else { 
			dir = SOUTH;
		} if (newY > tam) { 
			verificacion = false;
		} else if (newY < 1) { 
			verificacion=false;
		} else if (this.world.isBlocked(new Point(p.x, newY))) {
			verificacion = false;
		} else if(world.blockedInRange(p.x, p.y, newY, dir)) { 
			verificacion = false;
      	}
     	}
   }
   else if(latitud.equals("south")) {
      Point p = world.getPosition();
		int tam = world.getN();
		int newY,i;
		newY = p.y+(var);
		int dir = 5;
		{
		  if(p.y - newY > 0) { 
			dir = NORTH;
		} else { 
			dir = SOUTH;
		} if (newY > tam) { 
			verificacion = false;
		} else if (newY < 1) { 
			verificacion=false;
		} else if (this.world.isBlocked(new Point(p.x, newY))) { 
				verificacion = false;
		} else if(world.blockedInRange(p.x, p.y, newY, dir)) {
			verificacion = false;
		}
		}
	}
	else if(latitud.equals("east")) {
      Point p =world.getPosition();
		int tam = world.getN();
		int newX;
		newX = p.x+var;
		int dir = 5;
		{
		 if(p.x - newX > 0) { 
			dir = WEST;
		} else { 
			dir =EAST;
		} if (newX > tam) {  
			verificacion = false;
   		} else if (newX < 1) {  
			verificacion = false;
    	} else if (this.world.isBlocked(new Point(newX,p.y))) { 
			verificacion = false;
    	} else if(world.blockedInRange(p.x, p.y, newX, dir)) {
			verificacion = false;
		}
    	}
   }
   else if (latitud.equals("west")) { 
      Point p =world.getPosition();
		int tam = world.getN();
		int newX;
		newX = p.x+(-var);
		int dir = 5;
		{
		if(p.x - newX > 0) { 
			dir = WEST;
		} else { 
			dir = EAST;
		} if (newX > tam) {  
			verificacion = false;
    	} else if (newX < 1) {  
			verificacion = false;
    	} else if (this.world.isBlocked(new Point(newX,p.y))) { 
			verificacion = false;
    	} else if(world.blockedInRange(p.x, p.y, newX, dir)) { 
			verificacion = false;
		}
    	}
   }
	if (verificacion) { 
    System.out.println("si sirve");
  }else {
      System.out.println("no_sirve");
    }
  return verificacion;
}
}
	
	boolean condcanJumpToThe():
{
    int var;
    String latitud=null;
    Token lat;
    String dire;
}
{
  <CANJUMPTOTHE> ":" var=varOrNum() "," lat=<DIR>
  {
    dire= lat.image.toLowerCase();
     if(dire.equals("front")) {latitud="north"; }
    else if(dire.equals("back")) {latitud="south"; }
    else if(dire.equals("right")) {latitud="east"; }
    else if(dire.equals("left")) {latitud="west"; }
    
    boolean verificacion = true;
    if(latitud.equals("north")) {
      Point p = world.getPosition();
		int tam = world.getN();
		int newY,i;
		newY = p.y+(-var);
		int dir = 5;
		{  
		if(p.y - newY > 0) { 
			dir = NORTH;
		} else { 
			dir = SOUTH;
		} if (newY > tam) { 
			verificacion = false;
		} else if (newY < 1) { 
			verificacion=false;
		} else if (this.world.isBlocked(new Point(p.x, newY))) {
			verificacion = false;
		} else if(world.blockedInRange(p.x, p.y, newY, dir)) { 
			verificacion = false;
      	}
     	}
   }
   else if(latitud.equals("south")) {
      Point p = world.getPosition();
		int tam = world.getN();
		int newY,i;
		newY = p.y+(var);
		int dir = 5;
		{
		  if(p.y - newY > 0) { 
			dir = NORTH;
		} else { 
			dir = SOUTH;
		} if (newY > tam) { 
			verificacion = false;
		} else if (newY < 1) { 
			verificacion=false;
		} else if (this.world.isBlocked(new Point(p.x, newY))) { 
				verificacion = false;
		} else if(world.blockedInRange(p.x, p.y, newY, dir)) {
			verificacion = false;
		}
		}
	}
	else if(latitud.equals("east")) {
      Point p =world.getPosition();
		int tam = world.getN();
		int newX;
		newX = p.x+var;
		int dir = 5;
		{
		 if(p.x - newX > 0) { 
			dir = WEST;
		} else { 
			dir =EAST;
		} if (newX > tam) {  
			verificacion = false;
   		} else if (newX < 1) {  
			verificacion = false;
    	} else if (this.world.isBlocked(new Point(newX,p.y))) { 
			verificacion = false;
    	} else if(world.blockedInRange(p.x, p.y, newX, dir)) {
			verificacion = false;
		}
    	}
   }
   else if (latitud.equals("west")) { 
      Point p =world.getPosition();
		int tam = world.getN();
		int newX;
		newX = p.x+(-var);
		int dir = 5;
		{
		if(p.x - newX > 0) { 
			dir = WEST;
		} else { 
			dir = EAST;
		} if (newX > tam) {  
			verificacion = false;
    	} else if (newX < 1) {  
			verificacion = false;
    	} else if (this.world.isBlocked(new Point(newX,p.y))) { 
			verificacion = false;
    	} else if(world.blockedInRange(p.x, p.y, newX, dir)) { 
			verificacion = false;
		}
    	}
   }
	if (verificacion) { 
    System.out.println("si sirve");
  }else {
      System.out.println("no_sirve");
    }
  return verificacion;
}
}
	


	boolean condFacing():
	{
	  Token latT;
	  String lati;
	  boolean rta=true;
	  
	}
	{
	  < FACING> ":" latT=< LAT>
	  {
	    lati=latT.image.toLowerCase();
	    if(lati.equals("north")) {
	      rta= world.facingNorth(); }
	    if(lati.equals("south")) {
	      rta= world.facingSouth(); }
	    if(lati.equals("east")) {
	      rta= world.facingEast(); }
	    if(lati.equals("west")) {
	      rta= world.facingWest(); }

	    System.out.println(rta);
	    return rta;
	    }

	  }

	  boolean condCanPick():
	  { Token objT;
	  String obj;
	  int valor;}
	  {
	    < CANPICK> ":" valor=varOrNum() "," (objT=< BALLOONS> |objT=< CHIPS>)
	  {
	  boolean verf=true;
	  obj= objT.image.toLowerCase();
	  if (obj.equals("chips")) {
	    if(valor<0) {verf=false; }
	    else if(valor > world.chipsToPick()) {verf=false; }
	  }
	  else if(obj.equals("balloons")) {
	    if(valor<0) {verf=false; }
	    else if (world.countBalloons(world.getPosition())< valor) { verf=false;}
	    }
	  
	  System.out.println(verf);
	  return verf;
	}
 }


   boolean condCanPut():  
	{
	    String objeto;
	    Token objT;
	    int var;
	}
	{
	  < CANPUT > ":" var=varOrNum() "," (objT=< CHIPS > | objT=< BALLOONS >) 
	    {
	       Boolean verificar=true;
	       objeto = objT.image.toLowerCase();
	       if(objeto.equals("chips")) { 
	        	if (var > world.freeSpacesForChips()) { 
	            	verificar = false;
	            }
	        	else if (var <= world.freeSpacesForChips()) {
	            	verificar = true;
	        }
	      }
	      if(objeto.equals("balloons")) { 
	            }
	        else if (var > world.getMyBalloons()) { 
	            verificar = false;
	            }
	        else if (var < world.freeSpacesForChips()) {
	            verificar = true;
	        }
	      System.out.println(verificar);
	      return verificar;
	}
}

	  


 

	
// AYUDAS
	int varOrNum() throws Error:
	{
	  int total=0;
	  String variable;
	}
	{
	  (
	    < ID >
	    {
	      variable =token.image;
	      if(variables.get(variable) !=null) {
	        total= variables.get(variable);
	      }else {
	        throw new Error("La variable no existe");
	      }
	       return total;
	       
	     }
	    | < NUM > { try 
				{
					total = Integer.parseInt(token.image);
				} 
				catch (NumberFormatException ee) 
				{
					throw new Error("Number out of bounds: "+token.image+" !!");
				}
				return total; }
		  )
	}


	
	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}


	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

	




void boulean():
{
}
{
  partBou() (( "||" | "&&" ) partBou())*
}

void partBou():
{
}
{
  varOrNum() (< GT > | < EQUALS >) varOrNum()
| "!" boulean()
}
